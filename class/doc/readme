

1. Install SSL 

1.1 Install static SSL libraries  in Linux
a)  go to ~yqiu/SSL_NEW/USE/SSL090b  (check the directory)

b)  The perl is not in /usr/local/bin, but in /usr/bin
    To locate the directory of perl, you can run
	perl util/perlpath.pl  /usr/bin

    Note: the path must be absolute 

c)  To set the install locations if you don't like the default location 
    of /usr/local/ssl, you can run 
	perl util/ssldir.pl  /usr1/yqiu/SSL_NEW/USE/SSL090b/NEW	
    Note: 1. the path must be absolute
          2. if you change the location of SSL090b in the hard driver
             you may need to reinstall SSL to make the full package function	
d)  Setup the machine dependent stuff for the top level makefile and 
    some select .h files
	./Configure linux-elf

e)  Clean out all the old stuff
	make clean

f)  Build everything
	make

g)  Test everything
	make test

h)  Install the library and utilities
	make install

1.2 Install static SSL libraries in NT/95 or win 3.1 
a)  go to ../SSL090b (check the directory)

b)  perl Configure VC-WIN32  for NT/95
    perl Configure VC-WIN16  for win 3.1

c)  perl util/mk1mf.pl no-asm VC-WIN32 > mf-stat.nt   for NT/95
    in mf-stat.nt, change /MD to /MT    
    perl util/mk1mf.pl no-asm VC-WIN16 > mf-stat.w31  for win 3.1
       
d)  choose the right environment
    msc32    for NT/95
    msc16    for win 3.1

e)  nmake -f mf-stat.nt    for NT/95
    nmake -f mf-stat.w31   for win 3.1

f)  After a build of one of the version of microsoft SSLeay,
    cp test.bat from directory ms to directory out32 (or out16)
	in directory out32 (out16), type test, This should check everything out and
    even does a trial run of generating certificates.
    

2. Generating certificates and private keys
    In order to generate a private key, or a certificates, or a certificate 
    signing request (CSR) you simply need to have a "ssleay" executable 
    built (I recommend the UNIX version).


a) Create random state
    You need to generate some random information for input into the key 
    generation process. You can delete or alter the rand.dat file at any 
    time as the exact contents of it are not important.

    In the directory executive ssleay located 
	/home/yqiu/SSL_NEW/USE/SSL090b/NEW/bin
                                                     
	ls  > rand.dat


b) Generate a private key
	ssleay genrsa -rand rand.dat > key.pem


c) Generate a private key protected with a passphrase
	ssleay genrsa -rand rand.dat -des 1024 > key.pem
    OR (if you want to use triple DES)
	ssleay genrsa -rand rand.dat -des3 1024 > key.pem

    Note: Do not forget your passphrase otherwise your key will be 
          unable to be used.

d) Remove a passphrase from a private key
    If you want to remove the passphrase from a key you can simply use 
    the following command:

	ssleay rsa -in key1.pem -out key2.pem

    You will be prompted for your passphrase and the output file will not 
    be encrypted (as you didn't include any of the encryption options 
    (-des/-des3/-idea).

    You can then use key2.pem where you currently use key1.pem.


f)  Add a passphrase to a private key
	ssleay rsa -des -in key1.pem -out key2.pem
    OR (if you want to use triple DES)
	ssleay rsa -des3 -in key1.pem -out key2.pem

    You should probably remove key1.pem after doing this as if you want a 
    passphrase protected key, leaving a non-passphrase protected form of key 
    around may defeat the purpose of having a passphrase.

    Note: Do not forget your passphrase otherwise your key will be unable to 
    be used.


g)  Generate a certificate signing request (CSR)
    A certificate signing request (CSR) is what you send to a certification 
    authority (CA) for them to sign and return in the form of a certificate 
    which can used in combination with the private key you have generated 
    (which is not sent to the CA).

    If the request is for use with a secure web server, then when you are 
    prompted for the "Common Name" you should enter the name that matches the 
    name in the https URL that you are planning to use. It should be a fully 
    qualified domain name - i.e. something like www.domain.com

    If you are prompted for "extra attributes" then simply ignore them and 
    leave them blank (unless you have been directed to do otherwise by your CA).

	ssleay req -new -key key.pem -out csr.pem

    The contents of csr.pem should look something like the following:

-----BEGIN CERTIFICATE REQUEST-----
MIIBETCBvAIBADBXMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEh
MB8GA1UEChMYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMRAwDgYJKoZIhvcNAQkB
FgFgMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAL6nPTy3avNgbubx+ESmD4LV1LQG
fcSh8nehEOIxGwmCPlrhTP87PaA0XvGpvRQUjCGStrlQsd8lcYVVkOaytNUCAwEA
AaAAMA0GCSqGSIb3DQEBBAUAA0EAXcMsa8eXgbG2ZhVyFkRVrI4vT8haN39/QJc9
BrRh2nOTKgfMcT9h+1Xx0wNRQ9/SIGV1y3+3abNiJmJBWnJ8Bg==
-----END CERTIFICATE REQUEST-----

    Most CAs will have a location in the server certificate request process 
    where you have to cut and paste in the CSR. The CA will typically email 
    you either the signed certificate or a URL from which you can fetch the 
    signed certificate after they have verified that the details of your 
    certificate request match according to whatever criteria the CA applies 
    to requests.


h)  Generate a dummy self-signed certificate
    If you wish to operate with a self-signed (i.e. completely worthless 
    test certificate) then you can generate one yourself via:

	ssleay req -new -x509 -key key.pem -out dummy.pem


i)  How to be your own CA
    There is a ca program in SSLeay-0.9.x that includes the initial support 
    for basically operating as your own certifying  authority.

    Note: There is a lot more to being a CA then having the software to issue 
    certificates. If you plan on starting your own CA for public issuing of 
    certificates then you should start with reading all the information about 
    being a CA that is available from Verisign at http://www.verisign.com.


    Base level ca support in SSLeay
    A script around the ca program is wrapped to make it a little easier to 
    work with and it is included in the current SSLeay releases as apps/CA.sh.

	CA.sh  -newca ... will setup the right stuff for using ca

    The file located in ./demoCA/cacert.pem is the certificate of the 
    certificate authority used for authentication in the client/server 
    application.  

    The file located in  ./demoCA/private/cakey.pem is the 
    private key of the certificate authority used for signing  the 
    CSR (Certificate Signing Request) files sent by other servers.

	ssleay ca -policy policy_anything -infiles csr.pem  
	--- will sign the file csr.pem and output a cert in 
            directory ./demoCA/newcerts

j)  Authentication
    Client always authenticates server, but server may or may not 
    authenticate client.  

    If server authenticates client,  the variable 
    in file "sockutil.c",  int     server_auth_client=1
    and the client certificate "clicert.pem" and key "clikey.pem" 
    located in directory .\PEM\PEM_CLI are needed; 

    If server does not authenticate client,  the variable in file "sockutil.c"
    int     server_auth_client=0 and the client certificate "clicert.pem" 
    and key "clikey.pem" located in directory .\PEM\PEM_CLI are not needed. 

	Note: For the client,cacert.pem has to be in directory .\PEM\PEM_CA in either cases

k)  Compiling the client/server program
In Linux:
	make -f Makefile clean      --- clean the old files
	make -f Makefile MY_SSL=1   --- SSL
	make -f Makefile            --- no SSL

In NT
	dmake32 -f m32.dm           --- clean the old files
	dmake32 -f m32.dm           --- no SSL
	dmake32 -f m32.dm  MY_SSL=1 --- the SSL environment is setup statically.

Note: If  flag=0 in both server.c and client.c, the SSL environment can be 
      shut down dynamically.

Note: the  variable "flag" in both server.c and client.c must always be the 
      same. You either have a secure communication or regular communication 
      channel. 

      The certificates and keys  are located  in directory .\PEM.




